p_fix <- (1 - exp(-4*Ne*s*h*p0)) / (1 - exp(-4*Ne*h*s))
p_fix_neutral <- p0
Nsh <- Ne*s*h
c(Nsh = Nsh ,
p_fix = p_fix,
neutral = p_fix_neutral,
fix_ratio = (p_fix/p_fix_neutral))
}
prob_fix <- function(p0, Ne, s, h) {
p_fix <- (1 - exp(-4*Ne*s*h*p0)) / (1 - exp(-4*Ne*h*s))
p_fix_neutral <- p0
Nsh <- Ne*s*h
c(Nsh = Nsh ,
p_fix = p_fix,
neutral = p_fix_neutral,
fix_ratio = (p_fix/p_fix_neutral))
}
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
knitr::opts_chunk$set(echo = TRUE)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
plot(pf_out, show = "p", pause = 0.01)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
plot(pf_out, show = "p", pause = 0)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
plot(, show = "p", pause = 0)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
typeof(pf_out)
pf_out[1]
pf_out[2]
pf_out[3]
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_array <- [1:100]
Ne_array <- 1:100
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_new <- seq(1,100,1)
s_new <-
s_new <- seq(1,10,0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_new <- seq(0,100,1)
s_new <- seq(0,10,0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_new <- seq(0,100,1)
s_new <- seq(0,10,0.1)
Ne_new <- seq(0,100,1)
s_new <- seq(0,10,0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = Ne_new, s = s_new, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
(0.8**2)*0.9
2*0.8*0.2
(0.2**2)*0.6
0.576 + 0.32 + 0.024
0.9+0.8
0.8/1.7
2 - 0.9 - 0.8
0.2/0.3
2/3
2-0.9-0.6
.4/.5
0.25*1 + 0.5*0.95 + 0.25*0.9
1 + 0.5 + 1/3 + 1/4
4/2.08
7/2.08
21/6
3.5/1000
knitr::opts_chunk$set(echo = TRUE, eval = T)
library(coala)
library(scrm)
library(ape)
list_simulators()
sum_stats <- scrm("4 2 -t 5")
sum_stats
sum_stats <- scrm("10 5 -t 0.5")
sum_stats
sum_stats2 <- scrm('10 1 -r 0 100 -t 1.5 -T -L -oSFS')
str(sum_stats2)
sum_stats2
sum_stats2$seg_sites
sum_stats2$trees # not so useful yet...
sum_stats2$tmrca
sum_stats2$sfs
?scrm
sum_stats2 <- scrm('10 10 -r 0 100 -t 1.5 -T -L -oSFS')
str(sum_stats2)
sum_stats2
sum_stats2$seg_sites
sum_stats2$trees # not so useful yet...
sum_stats2$tmrca
mean_tmrca <- mean(tmrca_values)
variance_tmrca <- var(tmrca_values)
mean_tmrca
tmrca_values <- c(0.5092537, 1.873118, 0.1969917, 1.551757, 0.7353524, 0.8773538, 0.6666408, 1.316378, 0.7148051, 0.5028803)
mean_tmrca <- mean(tmrca_values)
variance_tmrca <- var(tmrca_values)
mean_tmrca
variance_tmrca
sum_stats3 <- scrm('10 5 -r 0 100 -t 3 -T')
sum_stats3$trees
trees <- read.tree(text = paste0(sum_stats3$trees))
trees
plot(trees, no.margin = TRUE)
sum_stats3 <- scrm('10 5 -r 0 100 -t 3 -T')
sum_stats3$trees
trees <- read.tree(text = paste0(sum_stats3$trees))
trees
plot(trees, no.margin = TRUE)
sum_stats3$tmrca
sum_stats3 <- scrm('10 5 -r 0 100 -t 3 -T -L')
sum_stats3$trees
trees <- read.tree(text = paste0(sum_stats3$trees))
trees
plot(trees, no.margin = TRUE)
sum_stats3$tmrca
vignette("coala-intro")
mod1 <- coal_model(sample_size = 10,
loci_number = 1,
loci_length = 10000)
mod1 <- coal_model(sample_size = 10,
loci_number = 1,
loci_length = 10000)
mod1
mod1 <- coal_model(sample_size = 10,
loci_number = 1,
loci_length = 10000) +
feat_mutation(rate = 20) + # mutation rate is per locus, not per site. So the loci_length matters
sumstat_nucleotide_div() + sumstat_sfs() + sumstat_tajimas_d() + sumstat_trees()
mod1 # just the code it produces for scrm
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi
mod1_sum$sfs
mod1_sum$tajimas_d
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum$sfs
mod1_sum$tajimas_d
N <- 10
k <- 10
mean_tmrca <- (4*N) / (k*(k-1))
variance_tmrca <- 16*N**2/(k*(k-1))**2
mean_tmrca
variance_tmrca
mod1_sum$pi / 10000
mod1_sum$sfs
mod1_sum$tajimas_d / 10000
mod1_sum$tajimas_d
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum$sfs
mod1_sum$tajimas_d
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
mod1
mod1_sum
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
par(mfrow = c(2,2))
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
trees <- read.tree(text = paste0(mod1_sum$trees))
trees
plot(trees, no.margin = FALSE)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
trees <- read.tree(text = paste0(mod1_sum$trees))
trees
plot(trees, no.margin = FALSE)
dev.off()
trees <- read.tree(text = paste0(mod1_sum$trees))
trees
plot(trees, no.margin = FALSE)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
mod_grow <- coal_model(sample_size = 40,
loci_number = 1,
loci_length = 10000) +
feat_growth(rate = 5, time = 0) +  # population size is growing "forward" in time
feat_growth(rate = 0, time = 1) +  # population size is constant prior to this
feat_mutation(rate = 20) +
sumstat_nucleotide_div() + sumstat_sfs() + sumstat_tajimas_d() + sumstat_trees()
mod_grow_sum <- simulate(mod_grow)
trees_grow <- read.tree(text = paste0(mod_grow_sum$trees))
plot(trees_grow , no.margin = FALSE)
#mod_grow_sum
mod_grow_sum$pi
mod_grow_sum$sfs
mod_grow_sum$tajimas_d
hist(mod_grow_sum$tajimas_d)
abline(v = 0, lty = 2)
mean(mod_grow_sum$tajimas_d) # average D
barplot(mod_grow_sum$sfs / sum(mod_grow_sum$sfs),
names.arg = seq_along(mod_grow_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
install.packages("airway")
BiocManager::install(airway)
BiocManager::install("airway")
library(airway)
#load libraries
library(DESeq2)
library(tidyverse)
library(airway)
#load libraries
library(TCGAbiolinks)
BiocManager::install(TCGAbiolinks)
BiocManager::install("TCGAbiolinks")
#load libraries
library(TCGAbiolinks)
# Query platform Illumina HiSeq with a list of barcode
query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
barcode = listSamples
)
#load libraries
library(TCGAbiolinks)
# Query platform Illumina HiSeq with a list of barcode
query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
barcode = listSamples
)
# You can define a list of samples to query and download providing relative TCGA barcodes.
listSamples <- c(
"TCGA-E9-A1NG-11A-52R-A14M-07","TCGA-BH-A1FC-11A-32R-A13Q-07",
"TCGA-A7-A13G-11A-51R-A13Q-07","TCGA-BH-A0DK-11A-13R-A089-07",
"TCGA-E9-A1RH-11A-34R-A169-07","TCGA-BH-A0AU-01A-11R-A12P-07",
"TCGA-C8-A1HJ-01A-11R-A13Q-07","TCGA-A7-A13D-01A-13R-A12P-07",
"TCGA-A2-A0CV-01A-31R-A115-07","TCGA-AQ-A0Y5-01A-11R-A14M-07"
)
# Query platform Illumina HiSeq with a list of barcode
query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
barcode = listSamples
)
# Download a list of barcodes with platform IlluminaHiSeq_RNASeqV2
GDCdownload(query)
# Prepare expression matrix with geneID in the rows and samples (barcode) in the columns
# rsem.genes.results as values
BRCA.Rnaseq.SE <- GDCprepare(query)
BRCAMatrix <- assay(BRCA.Rnaseq.SE,"unstranded")
BRCAMatrix <- assay(BRCA.Rnaseq.SE,"unstranded")
library(SummarizedExperiment)
BRCAMatrix <- assay(BRCA.Rnaseq.SE,"unstranded")
# For gene expression if you need to see a boxplot correlation and AAIC plot to define outliers you can run
BRCA.RNAseq_CorOutliers <- TCGAanalyze_Preprocessing(BRCA.Rnaseq.SE)
View(BRCAMatrix)
View(BRCA.RNAseq_CorOutliers)
# normalization of genes
dataNorm <- TCGAanalyze_Normalization(
tabDF = BRCA.RNAseq_CorOutliers,
geneInfo =  geneInfoHT
)
# normalization of genes
dataNorm <- TCGAanalyze_Normalization(
tabDF = BRCA.RNAseq_CorOutliers,
geneInfo =  geneInfoHT
)
install.packages("EDASeq")
BiocManager::install("EDASeq")
# normalization of genes
dataNorm <- TCGAanalyze_Normalization(
tabDF = BRCA.RNAseq_CorOutliers,
geneInfo =  geneInfoHT
)
library(EDASeq)
library(EDASeq)
# normalization of genes
dataNorm <- TCGAanalyze_Normalization(
tabDF = BRCA.RNAseq_CorOutliers,
geneInfo =  geneInfoHT
)
# normalization of genes
dataNorm <- TCGAanalyze_Normalization(
tabDF = BRCA.RNAseq_CorOutliers,
geneInfo =  geneInfoHT
)
BiocManager::install("EDASeq")
library(EDASeq)
# normalization of genes
dataNorm <- TCGAanalyze_Normalization(
tabDF = BRCA.RNAseq_CorOutliers,
geneInfo =  geneInfoHT
)
R --version
version()
version
#load libraries
library(BiocManager)
version
version
library(apeglm)
install.packages("airportr")
install.packages("shiny")
install.packages("shinyWidgets")
###IMPORTING THE DATA
morning_df_csv <- read.csv("Depersonalized_survey_data_morning(2).csv", header = TRUE)
combined_df_csv <- read.csv("combined_data_morning_afternoon_raw_CSV.csv", header = TRUE)
setwd("~/Desktop/cellsatwar4f06-thesis/survey_stuff_2022_cellsatwar_foranalysis")
combined_df_csv <- read.csv("combined_data_morning_afternoon_raw_CSV.csv", header = TRUE)
###CREATING SOME GRAPHS
library(ggplot2)
library(ggthemes)
library(ggpubr) #For ggarrange function
install.packages("ggthemes")
library(ggthemes)
### FUNCTION FOR PUMPING OUT BARPLOTS
plot_survey_fun <- function(df, bar_lables, xtitle, ytitle, chart_title) {
p <- ggplot(df, aes(x = df[,1], y = df[,2])) +
geom_col(show.legend = FALSE, width = 0.7, fill = "#000075") +
geom_text(aes(label = df[,2]), vjust = -0.5, colour = "black", nudge_x = -0.14 ) +
geom_text(aes(label = paste0("(",round(df[,2]/sum(df[,2])*100),")%")),vjust = -0.5, nudge_x = 0.14 ) +
scale_x_discrete(labels = bar_lables) +
xlab(xtitle) +
ylab(ytitle) +
ggtitle(chart_title)
p + theme_clean(base_size = 8)
}
combined_df_csv <- read.csv("combined_data_morning_afternoon_raw_CSV.csv", header = TRUE)
###CREATING SOME GRAPHS
library(ggplot2)
library(ggthemes)
library(ggpubr) #For ggarrange function
### FUNCTION FOR PUMPING OUT BARPLOTS
plot_survey_fun <- function(df, bar_lables, xtitle, ytitle, chart_title) {
p <- ggplot(df, aes(x = df[,1], y = df[,2])) +
geom_col(show.legend = FALSE, width = 0.7, fill = "#000075") +
geom_text(aes(label = df[,2]), vjust = -0.5, colour = "black", nudge_x = -0.14 ) +
geom_text(aes(label = paste0("(",round(df[,2]/sum(df[,2])*100),")%")),vjust = -0.5, nudge_x = 0.14 ) +
scale_x_discrete(labels = bar_lables) +
xlab(xtitle) +
ylab(ytitle) +
ggtitle(chart_title)
p + theme_clean(base_size = 8)
}
time_spent_vg <- as.data.frame(table(combined_df_csv$On.average..how.much.time.do.you.spend.playing.video.games.each.week....Select.one.option.))
time_spent_vg_labels <- c("NA", "I don't play video games", "Between 10-20 hours/week", "3-10 hours/week", "Under 3 hours a week", "More than 20 hours/week")
time_spent_vg_xtitle <- "Responses"
time_spent_vg_ytitle <- "Frequency"
time_spent_vg_title <- "Time Spent Playing Video Games"
plot_survey_fun(time_spent_vg, time_spent_vg_labels, time_spent_vg_xtitle, time_spent_vg_ytitle, time_spent_vg_title)
course_types_df <- as.data.frame(table(combined_df_csv$What.types.of.courses.have.you.taken.at.McMaster.this.current.school.year...Select.one.option.))
course_types_labels <- c("NA", "Balanced mix of course types", "Mostly hybrid or blended courses", "Mostly in-person courses", "Mostly remote courses")
course_types_xtitle <- "Responses"
course_types_ytitle <- "Frequency"
course_types_title <- "Types of Courses Taken"
plot_survey_fun(course_types_df, course_types_labels, course_types_xtitle, course_types_ytitle, course_types_title)
###COMBINED IDEAS FROM DIFFERENT COURSES WHEN COMPLETING ASSIGNMENTS
combined_ideas_df <- as.data.frame(table(combined_df_csv$During.the.current.school.year..how.often.would.you.say.you.have.done.the.following...Combined.ideas.from.different.courses.when.completing.assignments.))
combined_ideas_labels <- c("NA", "Never", "Often", "Sometimes", "Very Often")
combined_ideas_xtitle <- "Responses"
combined_ideas_ytitle <- "Frequency"
combined_ideas_title <- "Combined Ideas from Different Courses When Completing Assignments"
a <- plot_survey_fun(combined_ideas_df, combined_ideas_labels, combined_ideas_xtitle, combined_ideas_ytitle, combined_ideas_title)
###CONNECTED YOUR LEARNING TO SOCIETAL PROBLEMS OR HEALTH-RELATED ISSUES
connected_learning_df <- as.data.frame(table(combined_df_csv$During.the.current.school.year..how.often.would.you.say.you.have.done.the.following...Connected.your.learning.to.societal.problems.or.health.related.issues.))
connected_learning_labels <- c("NA", "Never", "Often", "Sometimes", "Very Often")
connected_learning_xtitle <- "Responses"
connected_learning_ytitle <- "Frequency"
connected_learning_title <- "Connected Learning to Societal/Health-Related Issues"
b <- plot_survey_fun(connected_learning_df, connected_learning_labels, connected_learning_xtitle, connected_learning_ytitle, connected_learning_title)
###LEARNED SOMETHING THAT CHANGED THE WAY YOU UNDERSTAND AN ISSUE OR CONCEPT
learned_something_df <- as.data.frame(table(combined_df_csv$During.the.current.school.year..how.often.would.you.say.you.have.done.the.following...Learned.something.that.changed.the.way.you.understand.an.issue.or.concept.))
learned_something_labels <- c("NA", "Never", "Often", "Sometimes", "Very Often")
learned_something_xtitle <- "Responses"
learned_something_ytitle <- "Frequency"
learned_something_title <- "Learned Something that Changed Understanding of An Issue/Concept"
c <- plot_survey_fun(learned_something_df, learned_something_labels, learned_something_xtitle, learned_something_ytitle, learned_something_title)
###CONNECTED IDEAS FROM YOUR COURSES TO YOUR PRIOR EXPERIENCES AND KNOWLEDGE
connected_ideas_df <- as.data.frame(table(combined_df_csv$During.the.current.school.year..how.often.would.you.say.you.have.done.the.following...Connected.ideas.from.your.courses.to.your.prior.experiences.and.knowledge.))
connected_ideas_labels <- c("NA","Often", "Sometimes", "Very Often")
connected_ideas_xtitle <- "Responses"
connected_ideas_ytitle <- "Frequency"
connected_ideas_title <- "Connected Ideas from Courses to Prior Experiences and Knowledge"
d <- plot_survey_fun(connected_ideas_df, connected_ideas_labels, connected_ideas_xtitle, connected_ideas_ytitle, connected_ideas_title)
ggarrange(a,b,c,d, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
